/*
 * Sonar C++ Plugin (Community)
 * Copyright (C) 2010-2020 SonarOpenCommunity
 * http://github.com/SonarOpenCommunity/sonar-cxx
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonar.cxx.sensors.other;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.xml.stream.XMLStreamException;
import javax.xml.transform.TransformerException;
import org.codehaus.staxmate.in.SMHierarchicCursor;
import org.codehaus.staxmate.in.SMInputCursor;
import org.sonar.api.PropertyType;
import org.sonar.api.batch.sensor.SensorContext;
import org.sonar.api.batch.sensor.SensorDescriptor;
import org.sonar.api.config.PropertyDefinition;
import org.sonar.api.resources.Qualifiers;
import org.sonar.api.utils.log.Logger;
import org.sonar.api.utils.log.Loggers;
import org.sonar.cxx.sensors.utils.CxxIssuesReportSensor;
import org.sonar.cxx.sensors.utils.StaxParser;
import org.sonar.cxx.utils.CxxReportIssue;

/**
 * Custom Rule Import, all static analysis are supported.
 *
 * @author jorge costa, stefan weiser
 */
public class CxxOtherSensor extends CxxIssuesReportSensor {

  public static final String REPORT_PATH_KEY = "sonar.cxx.other.reportPath";
  private static final Logger LOG = Loggers.get(CxxOtherSensor.class);

  /**
   * CxxOtherSensor for Other Sensor
   */
  public CxxOtherSensor() {
  }

  public static List<PropertyDefinition> properties() {
    String subcateg = "Other Analyser";
    return Collections.unmodifiableList(Arrays.asList(
      PropertyDefinition.builder(REPORT_PATH_KEY)
        .name("External analyser report(s)")
        .description("Path to a code analysis report, which is generated by some unsupported code analyser, relative to"
                       + "projects root." + USE_ANT_STYLE_WILDCARDS
                       + " See <a href='https://github.com/SonarOpenCommunity/sonar-cxx"
                       + "/wiki/Extending-the-code-analysis'>here</a> for details.")
        .subCategory(subcateg)
        .onQualifiers(Qualifiers.PROJECT)
        .multiValues(true)
        .build(),
      PropertyDefinition.builder(CxxOtherRepository.RULES_KEY)
        .name("External rules")
        .description("Rule sets for 'external' code analysers. Use one value per rule set. See <a href='https:"
                       + "//github.com/SonarOpenCommunity/sonar-cxx/wiki/Extending-the-code-analysis'>this page</a> for details.")
        .type(PropertyType.TEXT)
        .multiValues(true)
        .subCategory(subcateg)
        .build()
    ));
  }

  @Override
  public void describe(SensorDescriptor descriptor) {
    descriptor
      .name("import external analyser report(s)")
      .onlyOnLanguage("c++")
      .createIssuesForRuleRepository(getRuleRepositoryKey())
      .onlyWhenConfiguration(conf -> conf.hasKey(getReportPathKey()));
  }

  @Override
  public void processReport(final SensorContext context, File report) throws XMLStreamException, IOException,
                                                                             URISyntaxException, TransformerException {
    LOG.debug("Parsing 'other' format");

    var parser = new StaxParser((SMHierarchicCursor rootCursor) -> {
      rootCursor.advance();

      SMInputCursor errorCursor = rootCursor.childElementCursor("error");
      while (errorCursor.getNext() != null) {
        String file = errorCursor.getAttrValue("file");
        String line = errorCursor.getAttrValue("line");
        String id = errorCursor.getAttrValue("id");
        String msg = errorCursor.getAttrValue("msg");

        var issue = new CxxReportIssue(id, file, line, msg);
        saveUniqueViolation(context, issue);
      }
    });

    parser.parse(report);
  }

  @Override
  protected String getReportPathKey() {
    return REPORT_PATH_KEY;
  }

  @Override
  protected String getRuleRepositoryKey() {
    return CxxOtherRepository.KEY;
  }

}
