Annex A (informative)

**A.1 Keywords [gram.key]**

**A.2 Lexical conventions [gram.lex]**

token:
   identifier
   keyword
   literal
   operator-or-punctuator // todo

keyword: // todo
   any identifier listed in Table 5
   import-keyword
   module-keyword
   export-keyword

preprocessing-op-or-punc: // todo
   preprocessing-operator
   operator-or-punctuator

preprocessing-operator: one of // todo
 # ## %: %:%:

**A.3 Basics [gram.basic]**

**A.4 Expressions [gram.expr]**

// todo remove pseudo-destructor-name

noptr-new-declarator:
   [ expressionopt ] attribute-specifier-seqopt // todo
   noptr-new-declarator [ constant-expression ] attribute-specifier-seqopt

noexcept-expression // remove todo

**A.5 Statements [gram.stmt]**

**A.6 Declarations [gram.dcl]**

block-declaration:
   simple-declaration
   asm-declaration // todo
   namespace-alias-definition
   using-declaration
   using-enum-declaration // todo
   using-directive
   static_assert-declaration
   alias-declaration
   opaque-enum-declaration

function-specifier:
   virtual
   explicit-specifier // todo

explicit-specifier: // todo
   explicit( constant-expression )
   explicit

decltype-specifier // todo, different

simple-type-specifier:
   nested-name-specifieropt type-name
   nested-name-specifier template simple-template-id
   decltype-specifier // todo
   placeholder-type-specifier // todo
   nested-name-specifieropt template-name
   char
   char8_t // todo
   char16_t
   char32_t
   wchar_t
   bool
   short
   int
   long
   signed
   unsigned
   float
   double
   void
   // todo remove auto & decltype-specifier

elaborated-type-specifier:
   class-key attribute-specifier-seqopt nested-name-specifieropt identifier
   class-key simple-template-id
   class-key nested-name-specifier templateopt simple-template-id
   elaborated-enum-specifier // todo

elaborated-enum-specifier: // todo
   enum nested-name-specifieropt identifier

decltype-specifier: // todo
   decltype( expression )

function-definition:
   attribute-specifier-seqopt decl-specifier-seqopt declarator virt-specifier-seqopt function-body
   attribute-specifier-seqopt decl-specifier-seqopt declarator requires-clause function-body

opaque-enum-declaration:
   enum-key attribute-specifier-seqopt enum-head-name enum-baseopt ; // todo

using-enum-declaration: // todo
   using elaborated-enum-specifier ;

nested-namespace-definition:
   namespace enclosing-namespace-specifier ::inlineopt identifier { namespace-body } // todo

enclosing-namespace-specifier:
   identifier
   enclosing-namespace-specifier ::inlineopt identifier // todo

using-directive:
   attribute-specifier-seqopt using namespace nested-name-specifieropt namespace-name ;

asm-declaration: // todo
   attribute-specifier-seqopt asm( string-literal );

**A.7 Modules [gram.module]**

**A.8 Classes [gram.class]**

member-declaration:
   attribute-specifier-seqopt decl-specifier-seqopt member-declarator-listopt ;
   function-definition
   using-declaration
   using-enum-declaration // todo
   static_assert-declaration
   template-declaration
   explicit-specialization // todo
   deduction-guide
   alias-declaration
   opaque-enum-declaration // todo
   empty-declaration

base-specifier: // todo
   attribute-specifier-seqopt class-or-decltype
   attribute-specifier-seqopt virtual access-specifieropt class-or-decltype
   attribute-specifier-seqopt access-specifier virtualopt class-or-decltype

class-or-decltype: // todo
   nested-name-specifieropt type-name
   nested-name-specifier template simple-template-id
   decltype-specifier

// ##### todo compare A.10

**A.9 Overloading [gram.over]**

operator: one of // todo
  new delete new[] delete[] co_await () [] -> ->*
  ~ ! + - * / % ^ &
  | = += -= *= /= %= ^= &=
  |= == != < > <= >= <=> &&
  || << >> <<= >>= ++ -- ,

**A.10 Templates [gram.temp]**
